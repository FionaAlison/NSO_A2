#!/bin/bash
exec 2>/dev/null
# Usage check
if [ "$#" -ne 3 ]; then
  echo "Usage: $0 <openrc> <tag> <ssh_private_key>"
  exit 1
fi

OPENRC="$1"
TAG="$2"
SSH_KEY="$3"

# If SSH key path does NOT include a slash, assume it's in current directory
if [[ "$SSH_KEY" != */* ]]; then
  SSH_KEY="./$SSH_KEY"
fi

# Convert to absolute path
SSH_KEY=$(readlink -f "$SSH_KEY")

# Now you can safely use $SSH_KEY when writing to inventory or ssh config

KEY_NAME="${TAG}_key"
NETWORK="${TAG}_network"
SUBNET="${TAG}_subnet"
ROUTER="${TAG}_router"
BASTION_NAME="${TAG}_bastion"
PROXY1_NAME="${TAG}_proxy1"
PROXY2_NAME="${TAG}_proxy2"
VIP_PORT="${TAG}_vip"  # New virtual port for HAProxy
IMAGE_NAME="Ubuntu 20.04 Focal Fossa x86_64"
FLAVOR="1C-0.5GB-50GB"
SEC_GROUP="${TAG}_secgroup"
SSH_CONFIG="${TAG}_SSHconfig"
INVENTORY="${TAG}_inventory.ini"

source "$OPENRC"

log() {
  echo "$(date +'%Y-%m-%d %H:%M:%S') $*"
}

log "Starting deployment of $TAG"

# Upload SSH key
if ! openstack keypair show "$KEY_NAME" &>/dev/null; then
  log "Adding keypair $KEY_NAME"
  openstack keypair create --public-key "${SSH_KEY}.pub" "$KEY_NAME" &>/dev/null
fi

# Network setup
log "Setting up network $NETWORK"
openstack network show "$NETWORK" &>/dev/null || openstack network create "$NETWORK" &>/dev/null
log "Setting up subnet $SUBNET"
openstack subnet show "$SUBNET" &>/dev/null || openstack subnet create --network "$NETWORK" --subnet-range 192.168.42.0/24 --gateway 192.168.42.1 "$SUBNET" &>/dev/null

if ! openstack router show "$ROUTER" &>/dev/null; then
  openstack router create "$ROUTER" &>/dev/null
  openstack router set "$ROUTER" --external-gateway ext-net &>/dev/null
  openstack router add subnet "$ROUTER" "$SUBNET" &>/dev/null
  log "Router $ROUTER created and connected to subnet $SUBNET"
fi

# Security group
if ! openstack security group show "$SEC_GROUP" &>/dev/null; then
  log "Creating security group $SEC_GROUP"
  openstack security group create "$SEC_GROUP" &>/dev/null
  for PORT in 22 80 443 5000 6000 9103 3000 8086; do  # Added ports 80 and 443 for web traffic
    openstack security group rule create --proto tcp --dst-port "$PORT" --ingress --remote-ip 0.0.0.0/0 "$SEC_GROUP" &>/dev/null
  done
  openstack security group rule create --proto udp --dst-port 6000 --ingress --remote-ip 0.0.0.0/0 "$SEC_GROUP" &>/dev/null
  openstack security group rule create --proto udp --dst-port 8125 --ingress --remote-ip 0.0.0.0/0 "$SEC_GROUP" &>/dev/null
  openstack security group rule create --proto icmp --ingress --remote-ip 0.0.0.0/0 "$SEC_GROUP" &>/dev/null
fi

log "Checking existing floating IPs on ext-net"

# List floating IPs on ext-net (filter by network name ext-net if needed)
floating_ip_present=$(openstack floating ip list --network ext-net --status DOWN -c 'Floating IP Address' -f value 2>/dev/null | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$')

# Save them temporarily
echo "$floating_ip_present" > /tmp/floating_ips_list

line_count=$(grep -c -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$' /tmp/floating_ips_list)

if (( line_count == 0 )); then
  log "No floating IPs found, creating 2 floating IPs"
  fip1=$(openstack floating ip create ext-net -f value -c floating_ip_address)
  fip2=$(openstack floating ip create ext-net -f value -c floating_ip_address)
  echo "$fip1" > floating1
  echo "$fip2" > floating2
elif (( line_count == 1 )); then
  log "Only 1 floating IP found, reusing it and creating 1 more"
  read -r fip1 < /tmp/floating_ips_list
  echo "$fip1" > floating1
  fip2=$(openstack floating ip create ext-net -f value -c floating_ip_address)
  echo "$fip2" > floating2
else
  log "Multiple floating IPs found, reusing first two"
  head -n 2 /tmp/floating_ips_list | nl | while read -r idx ip; do
    echo "$ip" > floating$idx
  done
fi

FIP_BASTION=$(cat floating1)
FIP_HAPROXY=$(cat floating2)

log "Using floating IP $FIP_BASTION for bastion"
log "Using floating IP $FIP_HAPROXY for HAProxy VIP"

# Create virtual port for HAProxy VIP
if ! openstack port show "$VIP_PORT" &>/dev/null; then
  log "Creating virtual port $VIP_PORT for HAProxy VIP"
  openstack port create --network "$NETWORK" --fixed-ip subnet="$SUBNET" --no-security-group "$VIP_PORT" &>/dev/null
  
  # Assign floating IP to the virtual port
  openstack floating ip set --port "$VIP_PORT" "$FIP_HAPROXY" &>/dev/null
  log "Assigned floating IP $FIP_HAPROXY to virtual port $VIP_PORT"
  
  # Get the fixed IP of the virtual port
  VIP_FIXED_IP=$(openstack port show "$VIP_PORT" -f value -c fixed_ips | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}')
  log "Virtual port $VIP_PORT has fixed IP $VIP_FIXED_IP"
fi

# Launch VM with cloud-init user data
launch_vm() {
  NAME="$1"
  log "Launching $NAME"

  USERDATA_FILE=$(mktemp)
  cat > "$USERDATA_FILE" <<EOF
#cloud-config
ssh_authorized_keys:
  - $(cat ${SSH_KEY}.pub)
EOF

  openstack server create \
    --image "$IMAGE_NAME" \
    --flavor "$FLAVOR" \
    --key-name "$KEY_NAME" \
    --security-group "$SEC_GROUP" \
    --network "$NETWORK" \
    --user-data "$USERDATA_FILE" \
    "$NAME" &>/dev/null

  while true; do
    STATUS=$(openstack server show "$NAME" -f value -c status)
    [ "$STATUS" == "ACTIVE" ] && break
    [ "$STATUS" == "ERROR" ] && { log "ERROR: Failed to launch $NAME"; exit 1; }
    sleep 3
  done

  rm -f "$USERDATA_FILE"
}

# Launch VMs
for NAME in "$BASTION_NAME" "$PROXY1_NAME" "$PROXY2_NAME"; do
  launch_vm "$NAME"
done

assign_fip() {
  NAME="$1"
  IP="$2"
  PORT_ID=$(openstack port list --server "$NAME" -f value -c ID | head -n1)
  openstack floating ip set --port "$PORT_ID" "$IP" &>/dev/null
  log "Assigned floating IP $IP to $NAME"
}

assign_fip "$BASTION_NAME" "$FIP_BASTION"

# Configure HAProxy ports to allow traffic from VIP
configure_proxy_ports() {
  for PROXY in "$PROXY1_NAME" "$PROXY2_NAME"; do
    PROXY_IP=$(openstack server show "$PROXY" -f value -c addresses | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}')
    PORT_ID=$(openstack port list --fixed-ip ip-address="$PROXY_IP" -f value -c ID)
    openstack port set --allowed-address ip-address="$VIP_FIXED_IP" "$PORT_ID" &>/dev/null
    log "Configured port $PORT_ID ($PROXY) to allow traffic from VIP $VIP_FIXED_IP"
  done
}
configure_proxy_ports

# Launch service nodes (no FIPs)
for i in {1..3}; do
  launch_vm "${TAG}_node$i"
done

# Wait for all VMs to be ACTIVE
log "Waiting for all instances to be ACTIVE..."
while openstack server list --name "^${TAG}_" -f value -c Status | grep -vq ACTIVE; do sleep 40; done

refresh_known_hosts() {
  for ip in $(openstack server list --name "^${TAG}_" -f value -c Networks | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}'); do
      ssh-keygen -f "$HOME/.ssh/known_hosts" -R "$ip" > /dev/null 2>&1
      ssh-keyscan -H "$ip" >> "$HOME/.ssh/known_hosts" 2> /dev/null
  done
}
refresh_known_hosts


log "Generating SSH config to $SSH_CONFIG"
rm -f "$SSH_CONFIG"

# Global SSH settings
cat >> "$SSH_CONFIG" <<EOF
Host *
  User ubuntu
  IdentityFile $SSH_KEY
  StrictHostKeyChecking no
  UserKnownHostsFile /dev/null
  PasswordAuthentication no
  ForwardAgent yes
EOF

# Bastion Host
echo -e "\nHost $BASTION_NAME\n  HostName $FIP_BASTION" >> "$SSH_CONFIG"

# Generate Proxy hosts
for SERVER in "$PROXY1_NAME" "$PROXY2_NAME"; do
  IP=$(openstack server show "$SERVER" -f value -c addresses | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1)
  echo -e "\nHost $SERVER\n  HostName $IP\n  ProxyJump $BASTION_NAME" >> "$SSH_CONFIG"
done

# Generate Node hosts
for i in {1..3}; do
  NODE="${TAG}_node$i"
  IP=$(openstack server show "$NODE" -f value -c addresses | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1)
  echo -e "\nHost $NODE\n  HostName $IP\n  ProxyJump $BASTION_NAME" >> "$SSH_CONFIG"
done

log "SSH config generation complete."

log "Generating Ansible inventory to $INVENTORY"
rm -f "$INVENTORY"

cat > "$INVENTORY" <<EOF
[bastion]
$BASTION_NAME 

[proxy]
EOF

for SERVER in "$PROXY1_NAME" "$PROXY2_NAME"; do
  IP=$(openstack server show "$SERVER" -f value -c addresses | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1)
  echo "$SERVER" >> "$INVENTORY"
done

echo -e "\n[nodes]" >> "$INVENTORY"

for i in {1..3}; do
  NODE="${TAG}_node$i"
  IP=$(openstack server show "$NODE" -f value -c addresses | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1)
  echo "$NODE" >> "$INVENTORY"
done

cat >> "$INVENTORY" <<EOF

[all:vars]
haproxy_vip=$FIP_HAPROXY
haproxy_vip_fixed=$VIP_FIXED_IP
EOF



log "Running Ansible playbook"
#ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i "$INVENTORY" install-playbook.yaml
ANSIBLE_HOST_KEY_CHECKING=False ANSIBLE_SSH_COMMON_ARGS="-F $SSH_CONFIG" ansible-playbook -i "$INVENTORY" install-playbook.yaml

log "Deployment complete. HAProxy can be accessed via $FIP_HAPROXY"

# Validate node responses
REQUESTS=$(awk '/\[nodes\]/ {flag=1; next} /^\[/ {flag=0} flag && NF' "$INVENTORY" | wc -l)
PORT=5000
SLEEP_SEC=1
sleep 10

for i in $(seq 1 $REQUESTS); do
  timestamp=$(date "+%Y-%m-%d %H:%M:%S")
  response=$(curl -s http://$FIP_HAPROXY:$PORT/)
  log "Request$i @ $timestamp: $response"
  sleep $SLEEP_SEC
done

echo "HAProxy VIP: $FIP_HAPROXY (maps to $VIP_FIXED_IP)"
