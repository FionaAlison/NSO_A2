#!/bin/bash
# Usage check
if [ "$#" -ne 3 ]; then
  echo "Usage: $0 <openrc> <tag> <ssh_private_key>"
  exit 1
fi

OPENRC="$1"
TAG="$2"
SSH_KEY="$3"

# Validate SSH key
if [[ "$SSH_KEY" != */* ]]; then
  SSH_KEY="./$SSH_KEY"
fi
SSH_KEY=$(readlink -f "$SSH_KEY")
[ ! -f "${SSH_KEY}.pub" ] && { echo "ERROR: ${SSH_KEY}.pub not found"; exit 1; }

KEY_NAME="${TAG}_key"
NETWORK="${TAG}_network"
SUBNET="${TAG}_subnet"
ROUTER="${TAG}_router"
BASTION_NAME="${TAG}_bastion"
PROXY1_NAME="${TAG}_proxy1"
PROXY2_NAME="${TAG}_proxy2"
VIP_PORT="${TAG}_vip"
IMAGE_NAME="Ubuntu 20.04 Focal Fossa x86_64"
FLAVOR="1C-0.5GB-50GB"
SEC_GROUP="${TAG}_secgroup"
SSH_CONFIG="${TAG}_SSHconfig"
INVENTORY="${TAG}_inventory.ini"
LOG_FILE="openstack.log"

source "$OPENRC"

log() {
  echo "$(date +'%Y-%m-%d %H:%M:%S') $*" | tee -a "$LOG_FILE"
}

log "Starting deployment of $TAG using $OPENRC"

# Cache resource checks
mapfile -t EXISTING_NETWORKS < <(openstack network list -f value -c Name 2>>"$LOG_FILE")
mapfile -t EXISTING_SUBNETS < <(openstack subnet list -f value -c Name 2>>"$LOG_FILE")
mapfile -t EXISTING_ROUTERS < <(openstack router list -f value -c Name 2>>"$LOG_FILE")
mapfile -t EXISTING_KEYPAIRS < <(openstack keypair list -f value -c Name 2>>"$LOG_FILE")
mapfile -t EXISTING_SG < <(openstack security group list -f value -c Name 2>>"$LOG_FILE")
mapfile -t EXISTING_PORTS < <(openstack port list -f value -c Name 2>>"$LOG_FILE")

# Floating IPs
log "Checking existing floating IPs on ext-net"

# List floating IPs on ext-net (filter by network name ext-net if needed)
floating_ip_present=$(openstack floating ip list --network ext-net --status DOWN -c 'Floating IP Address' -f value 2>/dev/null | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$')

# Save them temporarily
echo "$floating_ip_present" > /tmp/floating_ips_list

line_count=$(grep -c -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$' /tmp/floating_ips_list)

# Reuse existing or create new floating IPs
if (( line_count == 0 )); then
  log "No floating IPs found, creating 2 floating IPs"
  FIP_BASTION=$(openstack floating ip create ext-net -f value -c floating_ip_address)
  FIP_HAPROXY=$(openstack floating ip create ext-net -f value -c floating_ip_address)
elif (( line_count == 1 )); then
  log "Only 1 floating IP found, reusing it and creating 1 more"
  read -r FIP_BASTION < /tmp/floating_ips_list
  FIP_HAPROXY=$(openstack floating ip create ext-net -f value -c floating_ip_address)
else
  log "Multiple floating IPs found, reusing first two"
  mapfile -t ips < <(head -n 2 /tmp/floating_ips_list)
  FIP_BASTION="${ips[0]}"
  FIP_HAPROXY="${ips[1]}"
fi

# Save to files
echo "$FIP_BASTION" > floating1
echo "$FIP_HAPROXY" > floating2


log "FIP_BASTION=$FIP_BASTION, FIP_HAPROXY=$FIP_HAPROXY"

# Resource creation
if ! [[ " ${EXISTING_KEYPAIRS[*]} " =~ " ${KEY_NAME} " ]]; then
  log "Adding keypair $KEY_NAME"
  openstack keypair create --public-key "${SSH_KEY}.pub" "$KEY_NAME" >>"$LOG_FILE" 2>&1 || { log "ERROR: Failed to create keypair"; exit 1; }
fi

if ! [[ " ${EXISTING_NETWORKS[*]} " =~ " ${NETWORK} " ]]; then
  log "Did not detect ${NETWORK} in the OpenStack project, adding it."
  openstack network create "$NETWORK" >>"$LOG_FILE" 2>&1 || { log "ERROR: Failed to create network"; exit 1; }
fi

if ! [[ " ${EXISTING_SUBNETS[*]} " =~ " ${SUBNET} " ]]; then
  log "Did not detect ${SUBNET} in the OpenStack project, adding it."
  openstack subnet create --network "$NETWORK" --subnet-range 192.168.42.0/24 --gateway 192.168.42.1 "$SUBNET" >>"$LOG_FILE" 2>&1 || { log "ERROR: Failed to create subnet"; exit 1; }
fi

if ! [[ " ${EXISTING_ROUTERS[*]} " =~ " ${ROUTER} " ]]; then
  log "Did not detect ${ROUTER} in the OpenStack project, adding it."
  openstack router create "$ROUTER" >>"$LOG_FILE" 2>&1 || { log "ERROR: Failed to create router"; exit 1; }
  openstack router set "$ROUTER" --external-gateway ext-net >>"$LOG_FILE" 2>&1 || { log "ERROR: Failed to set router gateway"; exit 1; }
  openstack router add subnet "$ROUTER" "$SUBNET" >>"$LOG_FILE" 2>&1 || { log "ERROR: Failed to add subnet to router"; exit 1; }
fi

if ! [[ " ${EXISTING_SG[*]} " =~ " ${SEC_GROUP} " ]]; then
  log "Creating security group $SEC_GROUP"
  openstack security group create "$SEC_GROUP" >>"$LOG_FILE" 2>&1 || { log "ERROR: Failed to create security group"; exit 1; }
  for PORT in 22 80 443 5000 9103 3000 8086 8404; do
    openstack security group rule create --proto tcp --dst-port "$PORT" --ingress --remote-ip 0.0.0.0/0 "$SEC_GROUP" >>"$LOG_FILE" 2>&1 || { log "ERROR: Failed to create TCP rule for port $PORT"; exit 1; }
  done
  openstack security group rule create --proto udp --dst-port 8125 --ingress --remote-ip 0.0.0.0/0 "$SEC_GROUP" >>"$LOG_FILE" 2>&1 || { log "ERROR: Failed to create UDP rule for port 8125"; exit 1; }
  openstack security group rule create --proto udp --dst-port 6000 --ingress --remote-ip 0.0.0.0/0 "$SEC_GROUP" >>"$LOG_FILE" 2>&1 || { log "ERROR: Failed to create UDP rule for port 6000"; exit 1; }
  openstack security group rule create --proto udp --dst-port 161 --ingress --remote-ip 0.0.0.0/0 "$SEC_GROUP" >>"$LOG_FILE" 2>&1 || { log "ERROR: Failed to create UDP rule for port 6000"; exit 1; }
  openstack security group rule create --proto vrrp --ingress --remote-ip 192.168.42.0/24 "$SEC_GROUP" >>"$LOG_FILE" 2>&1 || { log "ERROR: Failed to create VRRP rule"; exit 1; }
  openstack security group rule create --proto icmp --ingress --remote-ip 0.0.0.0/0 "$SEC_GROUP" >>"$LOG_FILE" 2>&1 || { log "ERROR: Failed to create ICMP rule"; exit 1; }
fi

if ! [[ " ${EXISTING_PORTS[*]} " =~ " ${VIP_PORT} " ]]; then
  log "Creating virtual port $VIP_PORT"
  openstack port create --network "$NETWORK" --fixed-ip subnet="$SUBNET" --no-security-group "$VIP_PORT" >>"$LOG_FILE" 2>&1 || { log "ERROR: Failed to create VIP port"; exit 1; }
  openstack floating ip set --port "$VIP_PORT" "$FIP_HAPROXY" >>"$LOG_FILE" 2>&1 || { log "ERROR: Failed to associate floating IP with VIP port"; exit 1; }
  VIP_FIXED_IP=$(openstack port show "$VIP_PORT" -f value -c fixed_ips 2>>"$LOG_FILE" | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}')
  [ -z "$VIP_FIXED_IP" ] && { log "ERROR: Failed to retrieve VIP fixed IP"; exit 1; }
fi

launch_vm() {
  NAME="$1"
  USERDATA_FILE=$(mktemp)
  cat > "$USERDATA_FILE" <<EOF
#cloud-config
ssh_authorized_keys:
  - $(cat ${SSH_KEY}.pub)
EOF
  openstack server create \
    --image "$IMAGE_NAME" \
    --flavor "$FLAVOR" \
    --key-name "$KEY_NAME" \
    --security-group "$SEC_GROUP" \
    --network "$NETWORK" \
    --user-data "$USERDATA_FILE" \
    "$NAME" > /dev/null 2>&1 &
  echo "$USERDATA_FILE"
}

VMS=("$BASTION_NAME" "$PROXY1_NAME" "$PROXY2_NAME")
NODE_COUNT=$(head -n 1 servers.conf)
if ! [[ "$NODE_COUNT" =~ ^[0-9]+$ ]]; then
  NODE_COUNT=3
fi
for i in $(seq 1 $NODE_COUNT); do
  VMS+=("${TAG}_node$i")
done
USERDATA_FILES=()
for NAME in "${VMS[@]}"; do
  if ! openstack server show "$NAME" >>"$LOG_FILE" 2>&1; then
    USERDATA_FILES+=($(launch_vm "$NAME"))
  fi
done

log "Waiting for all instances to be ACTIVE..."
for i in {1..600}; do
  all_active=true
  for NAME in "${VMS[@]}"; do
    STATUS=$(openstack server show "$NAME" -f value -c status 2>>"$LOG_FILE" || echo "NOT_FOUND")
    if [ "$STATUS" != "ACTIVE" ]; then
      if [ "$STATUS" == "ERROR" ]; then
        log "ERROR: Server $NAME in ERROR state"
        cat "${NAME}.log" >>"$LOG_FILE"
        exit 1
      elif [ "$STATUS" == "NOT_FOUND" ] || [ "$STATUS" == "BUILD" ]; then
        #log "Server $NAME status: $STATUS"
        all_active=false
      fi
    fi
  done
  if $all_active; then
    break
  fi
  sleep 1
done
if ! $all_active; then
  log "ERROR: Not all servers reached ACTIVE state within 600 seconds"
  for NAME in "${VMS[@]}"; do
    STATUS=$(openstack server show "$NAME" -f value -c status 2>>"$LOG_FILE" || echo "NOT_FOUND")
    log "$NAME status: $STATUS"
    [ -f "${NAME}.log" ] && cat "${NAME}.log" >>"$LOG_FILE"
  done
  exit 1
fi

for FILE in "${USERDATA_FILES[@]}"; do
  rm -f "$FILE"
done

# Assign floating IPs with retries
assign_fip() {
  NAME="$1"
  IP="$2"
  for attempt in {1..5}; do
    PORT_ID=$(openstack port list --server "$NAME" -f value -c ID 2>>"$LOG_FILE" | head -n1)
    if [ -n "$PORT_ID" ]; then
      openstack floating ip set --port "$PORT_ID" "$IP" >>"$LOG_FILE" 2>&1 && { log "Assigned floating IP $IP to $NAME"; return 0; } || log "Failed to assign floating IP $IP to $NAME, attempt $attempt"
    else
      log "No port found for $NAME, attempt $attempt"
    fi
    sleep 5
  done
  log "ERROR: Failed to assign floating IP to $NAME after 5 attempts"
  exit 1
}
assign_fip "$BASTION_NAME" "$FIP_BASTION"

# Configure HAProxy ports
configure_proxy_ports() {
  for PROXY in "$PROXY1_NAME" "$PROXY2_NAME"; do
    for attempt in {1..5}; do
      PROXY_IP=$(openstack server show "$PROXY" -f value -c addresses 2>>"$LOG_FILE" | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1)
      if [ -n "$PROXY_IP" ]; then
        PORT_ID=$(openstack port list --fixed-ip ip-address="$PROXY_IP" -f value -c ID 2>>"$LOG_FILE")
        if [ -n "$PORT_ID" ]; then
          openstack port set --allowed-address ip-address="$VIP_FIXED_IP" "$PORT_ID" >>"$LOG_FILE" 2>&1 && { log "Configured port $PORT_ID ($PROXY) to allow traffic from VIP $VIP_FIXED_IP"; break; } || log "Failed to configure port for $PROXY, attempt $attempt"
        else
          log "No port found for $PROXY_IP ($PROXY), attempt $attempt"
        fi
      else
        log "No IP found for $PROXY, attempt $attempt"
      fi
      sleep 5
    done
    [ -z "$PROXY_IP" ] || [ -z "$PORT_ID" ] && { log "ERROR: Failed to configure port for $PROXY after 5 attempts"; exit 1; }
  done
}
configure_proxy_ports

# SSH config and inventory generation
log "Generating SSH config to $SSH_CONFIG"
rm -f "$SSH_CONFIG"
cat > "$SSH_CONFIG" <<EOF
Host *
  User ubuntu
  IdentityFile $SSH_KEY
  StrictHostKeyChecking no
  UserKnownHostsFile /dev/null
  PasswordAuthentication no
  ForwardAgent yes

Host $BASTION_NAME
  HostName $FIP_BASTION
EOF
for SERVER in "$PROXY1_NAME" "$PROXY2_NAME"; do
  for attempt in {1..5}; do
    IP=$(openstack server show "$SERVER" -f value -c addresses 2>>"$LOG_FILE" | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1)
    if [ -n "$IP" ]; then
      echo -e "\nHost $SERVER\n  HostName $IP\n  ProxyJump $BASTION_NAME" >> "$SSH_CONFIG"
      break
    else
      log "No IP found for $SERVER, attempt $attempt"
    fi
    sleep 5
  done
  [ -z "$IP" ] && { log "ERROR: Failed to get IP for $SERVER after 5 attempts"; exit 1; }
done
for i in $(seq 1 $NODE_COUNT); do
  NODE="${TAG}_node$i"
  for attempt in {1..5}; do
    IP=$(openstack server show "$NODE" -f value -c addresses 2>>"$LOG_FILE" | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1)
    if [ -n "$IP" ]; then
      echo -e "\nHost $NODE\n  HostName $IP\n  ProxyJump $BASTION_NAME" >> "$SSH_CONFIG"
      break
    else
      log "No IP found for $NODE, attempt $attempt"
    fi
    sleep 5
  done
  [ -z "$IP" ] && { log "ERROR: Failed to get IP for $NODE after 5 attempts"; exit 1; }
done

log "Generating Ansible inventory to $INVENTORY"
rm -f "$INVENTORY"
cat > "$INVENTORY" <<EOF
[bastion]
$BASTION_NAME

[proxy]
$PROXY1_NAME
$PROXY2_NAME

[nodes]
EOF
for i in $(seq 1 $NODE_COUNT); do
  echo "${TAG}_node$i" >> "$INVENTORY"
done
cat >> "$INVENTORY" <<EOF

[all:vars]
haproxy_vip=$FIP_HAPROXY
haproxy_vip_fixed=$VIP_FIXED_IP
snmp_community={{ vault_snmp_community | default('public') }}
EOF

# Run Ansible playbook
log "Running Ansible playbook"
if ! ANSIBLE_HOST_KEY_CHECKING=False ANSIBLE_SSH_COMMON_ARGS="-F $SSH_CONFIG" ansible-playbook -i "$INVENTORY" install-playbook.yaml --skip-tags "haproxy-reconfigure, nodes-reconfigure, nginx-reconfigure" --forks 10 >>"$LOG_FILE" 2>&1; then
  log "ERROR: Ansible playbook failed"
  exit 1
fi

log "Deployment complete. HAProxy can be accessed via $FIP_HAPROXY"
# Validate node responses
REQUESTS=$(awk '/\[nodes\]/ {flag=1; next} /^\[/ {flag=0} flag && NF' "$INVENTORY" | wc -l)
PORT=5000
SLEEP_SEC=1
sleep 10

for i in $(seq 1 $REQUESTS); do
  timestamp=$(date "+%Y-%m-%d %H:%M:%S")
  response=$(curl -s http://$FIP_HAPROXY:$PORT/)
    
    # Extract hostname inside parentheses:
  host=$(echo "$response" | grep -oP '\(\K[^)]+')
    
  log "Request$i: $host"
done
echo "HAProxy VIP: $FIP_HAPROXY (maps to $VIP_FIXED_IP)"