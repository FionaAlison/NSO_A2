---
- name: Wait for all nodes to be reachable
  hosts: all
  gather_facts: no
  tasks:
    - name: Wait for SSH
      wait_for_connection:
        timeout: 300

- name: Common Setup - All Nodes
  hosts: all
  become: yes
  gather_facts: yes
  tags: [common]
  tasks:
    - name: Wait for apt lock
      shell: while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 5; done

    - name: Install base packages
      apt:
        name:
          - python3
          - python3-pip
          - python3-flask
          - curl
          - vim
          - net-tools
          - snmpd
        state: present
        update_cache: yes

    - name: Allow Telegraf port (9103)
      ufw:
        rule: allow
        port: '9103'
        proto: tcp

- name: Telegraf Setup - All nodes except bastion
  hosts: all:!bastion
  become: yes
  tags: [telegraf]
  tasks:
    - name: Add InfluxData GPG key
      apt_key:
        url: https://repos.influxdata.com/influxdata-archive_compat.key
        state: present

    - name: Add InfluxData APT repository
      apt_repository:
        repo: deb https://repos.influxdata.com/ubuntu focal stable
        state: present
        filename: influxdata

    - name: Install Telegraf
      apt:
        name: telegraf
        state: present
        update_cache: yes

    - name: Configure Telegraf
      template:
        src: templates/telegraf.conf.j2
        dest: /etc/telegraf/telegraf.conf
      notify: restart telegraf

    - name: Enable and start Telegraf
      systemd:
        name: telegraf
        enabled: yes
        state: started

  handlers:
    - name: restart telegraf
      service:
        name: telegraf
        state: restarted

- name: Configure bastion host - Monitoring stack
  hosts: bastion
  become: yes
  tags: [bastion]
  tasks:
    - name: Add InfluxData GPG key
      apt_key:
        url: https://repos.influxdata.com/influxdata-archive_compat.key
        state: present

    - name: Add InfluxDB repository
      apt_repository:
        repo: deb https://repos.influxdata.com/ubuntu focal stable
        state: present
        filename: influxdata

    - name: Add Grafana GPG key
      apt_key:
        url: https://packages.grafana.com/gpg.key
        state: present

    - name: Add Grafana repository
      apt_repository:
        repo: deb https://packages.grafana.com/oss/deb stable main
        state: present
        filename: grafana

    - name: Install monitoring stack
      apt:
        name:
          - influxdb
          - telegraf
          - grafana
        state: present
        update_cache: yes
      register: apt_result
      retries: 3
      delay: 30
      until: apt_result is succeeded


    - name: Start and enable services
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      loop:
        - influxdb
        - grafana-server
      

    - name: Wait for InfluxDB to be ready
      wait_for:
        host: 127.0.0.1
        port: 8086
        timeout: 30

    - name: Create InfluxDB monitoring database
      shell: influx -execute "CREATE DATABASE monitoring"
      args:
      changed_when: false

    - name: Configure Telegraf
      template:
        src: templates/monitoring_config.j2
        dest: /etc/telegraf/telegraf.conf
      notify:
        - restart telegraf
        - reload systemd

    - name: Provision Grafana InfluxDB datasource
      copy:
        content: |
          apiVersion: 1
          datasources:
            - name: InfluxDB
              type: influxdb
              access: proxy
              url: http://localhost:8086
              database: monitoring
              isDefault: true
              editable: false
        dest: /etc/grafana/provisioning/datasources/influxdb.yaml
        mode: '0644'
      notify: restart grafana

    - name: Deploy health check script
      copy:
        src: health_endpoint.py
        dest: /opt/health_endpoint.py
        mode: '0755'
      notify: restart health_endpoint

    - name: Create systemd service for health endpoint
      template:
        src: templates/health_endpoint.service.j2
        dest: /etc/systemd/system/health_endpoint.service
      notify: reload systemd

    - name: Enable and start health endpoint service
      systemd:
        name: health_endpoint
        enabled: yes
        state: started

    - name: Open monitoring ports in UFW
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - '3000'  # Grafana
        - '8086'  # InfluxDB
        - '8125'  # Telegraf StatsD

    - name: Upload iptables configuration script
      copy:
        src: configure-iptables.sh
        dest: /tmp/configure_iptables.sh
        mode: '0755'

    - name: Run iptables configuration script
      shell: /tmp/configure_iptables.sh
      become: yes

    - name: Ensure Grafana override directory exists
      file:
        path: /etc/systemd/system/grafana-server.service.d
        state: directory
        mode: '0755'

    - name: Ensure override.conf file exists
      copy:
        dest: /etc/systemd/system/grafana-server.service.d/override.conf
        content: |
          [Service]
          ProtectProc=invisible
        force: no  # Do not overwrite if it already exists

    - name: Comment out ProtectProc=invisible line in grafana config
      replace:
        path: /etc/systemd/system/grafana-server.service.d/override.conf
        regexp: '^ProtectProc=invisible'
        replace: '# ProtectProc=invisible'
    - name: Reload systemd if override modified
      systemd:
        daemon_reload: yes


  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: restart telegraf
      service:
        name: telegraf
        state: restarted
        enabled: yes

    - name: restart grafana
      service:
        name: grafana-server
        state: restarted

    - name: restart health_endpoint
      service:
        name: health_endpoint
        state: restarted


- name: Configure proxy nodes
  hosts: proxy
  become: yes
  tags: [proxy]
  vars:
    vip_address: "{{ haproxy_vip_fixed }}"
    interface: "{{ ansible_default_ipv4.interface }}"
    keepalived_priority: "{{ 100 if inventory_hostname == groups['proxy'][0] else 90 }}"
    keepalived_state: "{{ 'MASTER' if inventory_hostname == groups['proxy'][0] else 'BACKUP' }}"
    keepalived_password: "mysecretpassword"
    keepalived_peers: "{{ groups['proxy'] | difference([inventory_hostname]) | map('extract', hostvars, ['ansible_host']) | list }}"
  tasks:
    - name: Install HAProxy and Keepalived
      apt:
        name:
          - haproxy
          - keepalived
        state: present
        update_cache: yes

    - name: Configure HAProxy
      template:
        src: templates/haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
      notify: restart haproxy

    - name: Configure Keepalived
      template:
        src: templates/keepalived.conf.j2
        dest: /etc/keepalived/keepalived.conf
      notify: restart keepalived

    - name: Enable IP forwarding and non-local bind
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
      loop:
        - { name: net.ipv4.ip_nonlocal_bind, value: '1' }
        - { name: net.ipv4.ip_forward, value: '1' }

    - name: Create notification scripts
      copy:
        content: |
          #!/bin/bash
          echo MASTER > /var/run/keepalived.state
          logger "Keepalived: Entering MASTER state"
          ip addr add {{ vip_address }}/24 dev {{ interface }}
          arping -c 3 -A -I {{ interface }} {{ vip_address }}
          systemctl restart haproxy
        dest: /etc/keepalived/master.sh
        mode: '0755'

    - name: Create backup script
      copy:
        content: |
          #!/bin/bash
          echo BACKUP > /var/run/keepalived.state
          logger "Keepalived: Entering BACKUP state"
          ip addr del {{ vip_address }}/24 dev {{ interface }} || true
        dest: /etc/keepalived/backup.sh
        mode: '0755'

    - name: Create HAProxy health check
      copy:
        content: |
          #!/bin/bash
          if ! pgrep haproxy >/dev/null; then
            exit 1
          fi
          exit 0
        dest: /etc/keepalived/check_haproxy.sh
        mode: '0755'

    - name: Open proxy-related ports
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop: [5000, 161, 80, 443]

    - name: Allow VRRP traffic
      ufw:
        rule: allow
        proto: udp
        port: 112
        from_ip: "{{ item }}"
      loop: "{{ groups['proxy'] | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | list }}"
      when: inventory_hostname != item

    - name: Enable proxy services
      service:
        name: "{{ item }}"
        enabled: yes
        state: started
      loop:
        - keepalived
        - haproxy

  handlers:
    - name: restart haproxy
      service:
        name: haproxy
        state: restarted

    - name: restart keepalived
      service:
        name: keepalived
        state: restarted

- name: Configure service nodes
  hosts: nodes
  become: yes
  tags: [nodes]
  tasks:
    - name: Deploy Flask service script
      copy:
        src: service.py
        dest: /usr/local/bin/service.py
        mode: '0755'

    - name: Configure SNMP
      template:
        src: templates/snmpd.conf.j2
        dest: /etc/snmp/snmpd.conf
      notify: restart snmpd

    - name: Create Flask service unit
      template:
        src: templates/service.service.j2
        dest: /etc/systemd/system/service.service
      notify:
        - reload systemd
        - restart flask
        - enable flask

  handlers:
    - name: restart snmpd
      service:
        name: snmpd
        state: restarted

    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: restart flask
      service:
        name: service
        state: restarted

    - name: enable flask
      service:
        name: service
        enabled: yes
        state: started
